[{"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js":"3","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js":"4","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx":"5","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js":"6","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx":"7","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx":"8","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx":"9","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx":"10","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx":"11","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx":"12","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx":"13","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx":"14","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx":"15","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx":"16","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx":"17","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx":"18","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\LoadingIcon\\LoadingIcon.jsx":"19","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfileAside\\UserProfileAside.jsx":"20","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfile.jsx":"21","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserSetting.jsx":"22","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserAboutForm\\UserAboutForm.jsx":"23","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserPasswordForm\\UserPasswordForm.jsx":"24"},{"size":441,"mtime":1607611560683,"results":"25","hashOfConfig":"26"},{"size":1470,"mtime":1607836876201,"results":"27","hashOfConfig":"26"},{"size":1216,"mtime":1607869815748,"results":"28","hashOfConfig":"26"},{"size":627,"mtime":1607513550593,"results":"29","hashOfConfig":"26"},{"size":2273,"mtime":1607606957910,"results":"30","hashOfConfig":"26"},{"size":524,"mtime":1607459877923,"results":"31","hashOfConfig":"26"},{"size":2202,"mtime":1607776662289,"results":"32","hashOfConfig":"26"},{"size":1358,"mtime":1607748186357,"results":"33","hashOfConfig":"26"},{"size":2377,"mtime":1607884651978,"results":"34","hashOfConfig":"26"},{"size":1365,"mtime":1607777013306,"results":"35","hashOfConfig":"26"},{"size":1433,"mtime":1607884624858,"results":"36","hashOfConfig":"26"},{"size":3443,"mtime":1607766818885,"results":"37","hashOfConfig":"26"},{"size":547,"mtime":1607694335769,"results":"38","hashOfConfig":"26"},{"size":925,"mtime":1607715152414,"results":"39","hashOfConfig":"26"},{"size":3489,"mtime":1607763327047,"results":"40","hashOfConfig":"26"},{"size":605,"mtime":1607694853056,"results":"41","hashOfConfig":"26"},{"size":1369,"mtime":1607766940064,"results":"42","hashOfConfig":"26"},{"size":1357,"mtime":1607706255714,"results":"43","hashOfConfig":"26"},{"size":534,"mtime":1607762780535,"results":"44","hashOfConfig":"26"},{"size":1064,"mtime":1607860952157,"results":"45","hashOfConfig":"26"},{"size":2395,"mtime":1607869303728,"results":"46","hashOfConfig":"26"},{"size":1059,"mtime":1607884394242,"results":"47","hashOfConfig":"26"},{"size":2255,"mtime":1607876188535,"results":"48","hashOfConfig":"26"},{"size":1570,"mtime":1607879976587,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"4wge5a",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js",[],["109","110"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx",["111"],"import React, { useState, useContext } from 'react'\r\nimport { ThemeContext } from '../../Context/GeneralContext'\r\n\r\nimport './PostActions.css'\r\n\r\nconst PostActions = ({comments}) => {\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const [upvotes, setUpvotes] = useState(1000)\r\n  const [downvotes, setDownvotes] = useState(-1)\r\n  // const [comments, setComments] = useState(10)\r\n\r\n  const upvote = () => {\r\n    setUpvotes(upvotes+1)\r\n  }\r\n\r\n  const downvote = () => {\r\n    setDownvotes(downvotes-1)\r\n  }\r\n\r\n\r\n  return (\r\n    <section className={`post-actions ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"post-actions__container\">\r\n        <div className=\"post-actions__container-col\">\r\n\r\n          <button className=\"post-actions__container-col__vote\" onClick={upvote}>\r\n            <i className=\"fas fa-heart\" />\r\n            {upvotes}\r\n          </button>\r\n\r\n          {/* <button className=\"post-actions__container-col__vote\" onClick={downvote}>\r\n            <i className=\"fas fa-caret-down fa-2x\" />\r\n            {downvotes}\r\n          </button> */}\r\n\r\n        </div>\r\n\r\n        <div className=\"post-actions__container-col\">\r\n          <div className=\"post-actions__container-col__comments\">\r\n            <h4>Comments({comments})</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PostActions\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx",["112","113","114","115"],"import React, { useState , useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from \"../Context/AuthContext\"\r\nimport { ThemeContext } from \"../Context/GeneralContext\"\r\nimport { db } from '../Firebase/firebase'\r\n\r\nimport firebase from 'firebase'\r\n\r\nimport \"./CreatePost.css\"\r\n\r\nconst CreatePost = () => {\r\n  let history = useHistory()\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [text,setText] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [platform, setPlatform] = useState('All')\r\n\r\n  const [loading, isLoading] = useState(false)\r\n\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const handlePostSubmit = e => {\r\n    e.preventDefault()\r\n    if(currentUser){\r\n\r\n      db.collection('users').get()\r\n        .then((\r\n          res => {\r\n  \r\n            res.docs.map((doc) => {\r\n              if(doc.id === currentUser.uid){\r\n                \r\n                addPost(doc.data().displayName)\r\n                \r\n              }\r\n            })\r\n          }\r\n        ))\r\n    } else {\r\n      alert(\"You need to create on account to post\")\r\n    }\r\n  }\r\n\r\n  const addPost = (userName) => {\r\n    isLoading(true)\r\n    db.collection('posts').add(\r\n      {\r\n        displayName: userName,\r\n        title,\r\n        para: text,\r\n        subPlatform: platform,\r\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp()\r\n      }\r\n    ).then(docRef => {\r\n      console.log(docRef.id)\r\n      history.push(`/post/${docRef.id}`)\r\n    })\r\n    \r\n  }\r\n\r\n  \r\n  return (\r\n    <section className={`create-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"create-post__container\">\r\n        <form className=\"create-post__container__form\" onSubmit={handlePostSubmit}>\r\n          <div className=\"create-post__container__form__input\">\r\n            <input type=\"text\" required onChange={e => setTitle(e.target.value)} value={title}/>\r\n            <label className=\"create-post__container__form__input__label title\">Title</label>\r\n          </div>\r\n          <div className=\"create-post__container__form__input\">\r\n            <textarea type=\"text\" required onChange={e => setText(e.target.value)} value={text} />\r\n            <label className=\"create-post__container__form__input__label text\">Text</label>\r\n          </div>\r\n\r\n          <div className=\"create-post__container__form__btn__platform\">\r\n            <button className=\"create-post__container__form__btn\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n\r\n            <select className=\"create-post__container__form__options\" onChange={e => setPlatform(e.target.value)}>\r\n\r\n              <option value=\"All\" className=\"create-post__container__form__platform\">All</option>\r\n              <option value=\"FrontEnd\" className=\"create-post__container__form__platform\">Front-end</option>\r\n              <option value=\"BackEnd\" className=\"create-post__container__form__platform\">Back-end</option>\r\n              <option value=\"FullStack\" className=\"create-post__container__form__platform\">Full-Stack</option>\r\n              <option value=\"Design\" className=\"create-post__container__form__platform\">Design</option>\r\n              <option value=\"Devops\" className=\"create-post__container__form__platform\">Devops</option>\r\n\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CreatePost","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx",["116"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport SinglePostComments from './SinglePostComments/SinglePostComments'\r\nimport SinglePostMain from './SinglePostMain/SinglePostMain'\r\n\r\nimport './SinglePost.css'\r\n\r\nconst SinglePost = () => {\r\n  const { postID } = useParams()\r\n\r\n  return (\r\n    <section className=\"single-post-page\">\r\n      <div className=\"single-post-page__container\">\r\n        <SinglePostMain \r\n          postID = {postID}\r\n        />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePost\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx",["117"],"import React, { useEffect, useState } from 'react'\r\nimport Comment from \"../../Reusables/Comment/Comment\"\r\nimport { db } from \"../../Firebase/firebase\"\r\n\r\nimport './SinglePostComments.css'\r\n\r\nconst SinglePostComments = ({postID}) => {\r\n  const [comments, setComments] = useState([])\r\n\r\n  useEffect(() => {\r\n    db.collection('comments').where(\"parentID\", \"==\", postID).onSnapshot(snapshot => {\r\n      setComments(snapshot.docs)\r\n    })\r\n\r\n  },[])\r\n\r\n  return (\r\n    <section className=\"single-post-comments\">\r\n      <div className=\"single-post-comments__container\">\r\n        <div className=\"single-post-comments__container-header\">\r\n          <h2>Comments</h2>\r\n        </div>\r\n        {comments.map((comment) => {\r\n          return(\r\n          \r\n            <Comment \r\n              props={comment.data()}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostComments\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx",["118","119","120","121"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {useParams, Link} from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { ThemeContext } from '../../Context/GeneralContext'\r\n\r\nimport { db } from '../../Firebase/firebase'\r\nimport LoadingIcon from '../../Reusables/LoadingIcon/LoadingIcon'\r\nimport SinglePostComments from '../SinglePostComments/SinglePostComments'\r\nimport SinglePostInput from '../SinglePostInputComment/SinglePostInput'\r\n\r\nimport './SinglePostMain.css'\r\n\r\nconst SinglePostMain = () => {\r\n  const {currentUser} = useContext(AuthContext)\r\n  const {darkTheme} = useContext(ThemeContext)\r\n  const { postID } = useParams()\r\n\r\n  let posts = []\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [para, setPara] = useState('')\r\n  const [imageURL, setImageURL] = useState('')\r\n  const [subPlatform, setSubPlatform] = useState('')\r\n\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  const fetchData = () => {\r\n    \r\n    db.collection('posts').get()\r\n      .then(res => {\r\n        res.docs.map((doc) => {\r\n\r\n          if(doc.id === postID){\r\n            posts.push(doc.data())\r\n\r\n\r\n\r\n            setPara(posts[0].para)\r\n            setTitle(posts[0].title)\r\n            setDisplayName(posts[0].displayName)\r\n            setSubPlatform(posts[0].subPlatform)\r\n            isLoading(false)\r\n          }\r\n        })\r\n      })\r\n    \r\n  }\r\n\r\n  // FOR GETTING THE DETAILS OF THE POST\r\n  useEffect(() => {\r\n    isLoading(true)\r\n    fetchData()\r\n    \r\n    return fetchData\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <section className={`single-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      {loading ? (\r\n        <LoadingIcon />\r\n      ) : (\r\n        <div className=\"post__container single-post__container\">\r\n\r\n        <div className=\"single-post__container__post-user-details\">\r\n          <div className=\"single-post__container__post-user-details__avatar\">\r\n            {imageURL ? (\r\n              <img src={imageURL} alt=\"user\"/>\r\n            ) : (\r\n              <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSrDJ5-IKojn4Rn2dlrRjCzDUjJ8G-TYuh0Aw&usqp=CAU\" alt=\"user\" />\r\n            )}\r\n          </div>\r\n        \r\n          <div className=\"single-post__container__post-user-details__col\">\r\n\r\n            <div className=\"single-post__container__post-user-details__col__platform\">\r\n              <Link to={`/platform/${subPlatform}`}>\r\n                <h5>TDP/{subPlatform}</h5>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"single-post__container__post-user-details__col__username\">\r\n              <h6>By u/{displayName}</h6>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"single-post__container__post-details\">\r\n\r\n          <div className=\"single-post__container__post-details__heading\">\r\n              <h1 className=\"single-post__container__post-details__heading-heading\">\r\n                {title}\r\n              </h1>\r\n          </div>\r\n\r\n          <div className=\"single-post__container__post-details__para\">\r\n            <p className=\"single-post__container__post-details__para-para\">\r\n              {para}\r\n            </p>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <SinglePostInput\r\n          postID={postID}\r\n          userName={displayName}\r\n        />\r\n\r\n        <SinglePostComments postID={postID}/>\r\n      </div>\r\n      )}\r\n      \r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostMain\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx",["122"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { ThemeContext } from '../Context/GeneralContext'\r\nimport Post from '../Reusables/PostComponent/Post'\r\nimport { db } from '../Firebase/firebase'\r\nimport './PlatformHome.css'\r\n\r\nconst PlatformHome = () => {\r\n  const {subPlatform} = useParams()\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const [postsArr, setPostsArr] = useState([])\r\n\r\n  useEffect(() => {\r\n    db.collection('posts').where(\"subPlatform\", \"==\" ,subPlatform).onSnapshot(snapshot => {\r\n      \r\n      setPostsArr(snapshot.docs.map( \r\n        doc => \r\n        (\r\n          {\r\n            id: doc.id,\r\n            post: doc.data()\r\n          }\r\n        )\r\n        \r\n      ))\r\n    })\r\n  },[])\r\n\r\n  return (\r\n    <section className={`home ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"home__container\">\r\n      <div className=\"platform-home\">\r\n        <h2>Welcome to \r\n          <span>\r\n            TDP/{subPlatform}\r\n          </span>\r\n        </h2>\r\n      </div>\r\n        {postsArr.map((props) => {\r\n          const ID = props.id\r\n          return(\r\n            <div className=\"home-post\">\r\n              <Post key={ID} props={props}/>\r\n            </div>\r\n          )\r\n        })}\r\n        \r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PlatformHome\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\LoadingIcon\\LoadingIcon.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfileAside\\UserProfileAside.jsx",["123","124","125","126"],"import React, { useEffect, useState } from 'react'\r\nimport { db } from '../../Firebase/firebase'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport './UserProfileAside.css'\r\n\r\nconst UserProfileAside = () => {\r\n  const {userName} = useParams()\r\n  const [bio,setBio] = useState('')\r\n  const [imgURL,setImgURL] = useState('')\r\n  let userDetails\r\n\r\n  useEffect(() => {\r\n    db.collection('users').where(\"displayName\", \"==\", userName).onSnapshot(snapshot => {\r\n      snapshot.docs.map((doc) => {\r\n        userDetails = doc.data()\r\n        setBio(userDetails.bio)\r\n      })\r\n    })\r\n      \r\n  }, [])\r\n  \r\n  return (\r\n    <aside className=\"user-profile-aside\">\r\n      <div className=\"user-profile-aside__container\">\r\n        <img src=\"https://reactjs.org/logo-og.png\" alt=\"\"/>  \r\n        <div className=\"user-profile-aside__container__name\">\r\n          <h4>TDPu/{userName}</h4>\r\n        </div>\r\n        <div className=\"user-profile-aside__container__bio\">\r\n          <p>{bio}</p>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default UserProfileAside\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfile.jsx",["127"],"import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { db } from '../Firebase/firebase'\r\n\r\nimport LoadingIcon from '../Reusables/LoadingIcon/LoadingIcon'\r\nimport Post from '../Reusables/PostComponent/Post'\r\nimport UserProfileAside from './UserProfileAside/UserProfileAside'\r\n\r\nimport './UserProfile.css'\r\n\r\nconst UserProfile = () => {\r\n  const { userName } = useParams()\r\n\r\n  const [posts,setPosts] = useState([])\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    db.collection('posts').where(\"displayName\", \"==\", userName).onSnapshot(snapshot => {\r\n      \r\n      //DID THIS BECAUSE WHEN PASSING PROPS IT PASSES IT DIFFRENTLY THEN HOW IT DOES ON THE HOME PAGE, SO TO MATCH IT, THE STRUCTURING IS DONE JUST BEFORE PASSING THE PROPS\r\n      setPosts(snapshot.docs)\r\n      \r\n      isLoading(false)\r\n      \r\n    })\r\n    \r\n  }, [])\r\n\r\n  \r\n\r\n  return (\r\n    <section className=\"user-settings\">\r\n      {loading ? (\r\n        <LoadingIcon />\r\n      ) : (\r\n          <div className=\"user-settings__container\">\r\n            {posts.length > 0 ? (\r\n              <>\r\n                <div className=\"user-settings__container__posts\">\r\n                  {posts.map(post => {\r\n                    const postStructure = {\r\n                      id: post.id,\r\n                      post: post.data()\r\n                    }\r\n                    const ID = post.id\r\n                    \r\n                    return(\r\n                      <div className=\"user-settings__container__posts-post\">\r\n                        <Post \r\n                          key={ID}\r\n                          props={postStructure}\r\n                        />\r\n                      </div>\r\n                    )\r\n                })}\r\n              </div>\r\n              <div className=\"user-settings__container__profile\">\r\n                <UserProfileAside\r\n                  userName = { userName }\r\n                />\r\n              </div>\r\n            </>\r\n          ) \r\n            : //either the top one or the bottom one should show :)\r\n          (\r\n            <div className=\"user-settings__container__empty\">\r\n              <h1>Looks like <span>{userName}</span> has no posts or dosent have an account</h1>\r\n            </div>\r\n          )}\r\n            \r\n\r\n          \r\n        </div>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserSetting.jsx",["128"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserAboutForm\\UserAboutForm.jsx",["129"],"import React,{ useEffect, useState, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport LoadingIcon from '../../Reusables/LoadingIcon/LoadingIcon'\r\nimport { db } from '../../Firebase/firebase'\r\n\r\nimport './UserAboutForm.css'\r\n\r\nconst UserAboutForm = () => {\r\n  const history = useHistory()\r\n\r\n  const {currentUser} = useContext(AuthContext)\r\n\r\n  const [bio, setBio] = useState('')\r\n  const [userName, setUserName] = useState('')\r\n  const [imgURL, setImgURL] = useState()\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    if (window.confirm(\"Do you want to change your details\")) {\r\n      db.collection('users').doc(currentUser.uid).update(\r\n        {\r\n          bio\r\n        }\r\n      )\r\n      history.push(`/dev/${userName}`)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(currentUser){\r\n      db.collection('users').doc(currentUser.uid).onSnapshot(snapshot => {\r\n        const userData = snapshot.data()\r\n        setBio(userData.bio)\r\n        setUserName(userData.displayName)\r\n        isLoading(false)\r\n      })\r\n        \r\n    }\r\n  } , [currentUser])\r\n  return (\r\n    <form className=\"user-settings-page__container__form\" onSubmit={handleSubmit}>\r\n      {loading ? (\r\n        <LoadingIcon />\r\n      ) : (\r\n        <>\r\n          <div className=\"user-settings-page__container__form__image\">\r\n            <img src={\r\n              imgURL ? imgURL : \"https://reactjs.org/logo-og.png\"\r\n            } alt=\"User Profile\"/>\r\n          </div>\r\n          <div className=\"user-settings-page__container__form__userName\">\r\n            <h5 className=\"user-settings-page__container__form__userName-userName\">UserName: </h5>\r\n            <h5>{userName}</h5>\r\n          </div>\r\n          <div className=\"user-settings-page__container__form__bio\">\r\n            <textarea type=\"text\" value={bio} onChange={e => setBio(e.target.value)} required/>\r\n            <label className=\"user-settings-page__container__form__label\">Bio</label>\r\n          </div>\r\n\r\n          <button className=\"user-settings-page__container__form__btn\">Submit!</button>\r\n        </>\r\n      )}\r\n      \r\n    </form>\r\n  )\r\n}\r\n\r\nexport default UserAboutForm\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingPage\\UserPasswordForm\\UserPasswordForm.jsx",["130"],"import React, { useState, useContext } from 'react'\r\nimport './UserPasswordForm.css'\r\nimport {AuthContext} from '../../Context/AuthContext'\r\nimport { db } from '../../Firebase/firebase'\r\n\r\nconst UserPasswordForm = () => {\r\n  const { currentUser } = useContext(AuthContext)\r\n\r\n  const [newPassword, setNewPassword] = useState('')\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if(window.confirm(\"Are you sure you want to change your password?\")){\r\n        currentUser.updatePassword(newPassword)\r\n          .catch(() => {\r\n            alert(\"This is sesitive information and hence for better safety of our users we have implemented such that, to change your password, you would have to re-authenticate yourself if you have not logged in recently. For more information you can contact us using the 'Help' platform\")\r\n            setNewPassword('')\r\n          }\r\n        )\r\n      }\r\n  }\r\n\r\n  return (\r\n    <section className=\"user-settings-password\">\r\n      <div className=\"user-settings-password__header\">\r\n        <h2>Change Password</h2>\r\n      </div>\r\n      <form className=\"user-settings-password__form\" onSubmit={handleSubmit}>\r\n        <div className=\"user-settings-password__form--password\">\r\n          <input type=\"password\" minLength=\"6\" required value={newPassword} onChange={e => setNewPassword(e.target.value)} />\r\n          <label>New Password</label>\r\n        </div>\r\n        <button className=\"user-settings-password__form--btn\">\r\n          Change\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default UserPasswordForm\r\n",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":17,"column":9,"nodeType":"137","messageId":"138","endLine":17,"endColumn":17},{"ruleId":"135","severity":1,"message":"139","line":16,"column":10,"nodeType":"137","messageId":"138","endLine":16,"endColumn":21},{"ruleId":"135","severity":1,"message":"140","line":16,"column":23,"nodeType":"137","messageId":"138","endLine":16,"endColumn":37},{"ruleId":"135","severity":1,"message":"141","line":19,"column":10,"nodeType":"137","messageId":"138","endLine":19,"endColumn":17},{"ruleId":"142","severity":1,"message":"143","line":33,"column":32,"nodeType":"144","messageId":"145","endLine":33,"endColumn":34},{"ruleId":"135","severity":1,"message":"146","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":26},{"ruleId":"147","severity":1,"message":"148","line":15,"column":5,"nodeType":"149","endLine":15,"endColumn":7,"suggestions":"150"},{"ruleId":"135","severity":1,"message":"151","line":14,"column":10,"nodeType":"137","messageId":"138","endLine":14,"endColumn":21},{"ruleId":"135","severity":1,"message":"152","line":23,"column":20,"nodeType":"137","messageId":"138","endLine":23,"endColumn":31},{"ruleId":"142","severity":1,"message":"143","line":32,"column":28,"nodeType":"144","messageId":"145","endLine":32,"endColumn":30},{"ruleId":"147","severity":1,"message":"153","line":56,"column":6,"nodeType":"149","endLine":56,"endColumn":8,"suggestions":"154"},{"ruleId":"147","severity":1,"message":"155","line":28,"column":5,"nodeType":"149","endLine":28,"endColumn":7,"suggestions":"156"},{"ruleId":"135","severity":1,"message":"157","line":10,"column":10,"nodeType":"137","messageId":"138","endLine":10,"endColumn":16},{"ruleId":"135","severity":1,"message":"158","line":10,"column":17,"nodeType":"137","messageId":"138","endLine":10,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":15,"column":31,"nodeType":"144","messageId":"145","endLine":15,"endColumn":33},{"ruleId":"147","severity":1,"message":"159","line":16,"column":23,"nodeType":"160","endLine":16,"endColumn":33},{"ruleId":"147","severity":1,"message":"161","line":27,"column":6,"nodeType":"149","endLine":27,"endColumn":8,"suggestions":"162"},{"ruleId":"135","severity":1,"message":"151","line":13,"column":11,"nodeType":"137","messageId":"138","endLine":13,"endColumn":22},{"ruleId":"135","severity":1,"message":"158","line":16,"column":18,"nodeType":"137","messageId":"138","endLine":16,"endColumn":27},{"ruleId":"135","severity":1,"message":"163","line":4,"column":10,"nodeType":"137","messageId":"138","endLine":4,"endColumn":12},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'downvote' is assigned a value but never used.","Identifier","unusedVar","'displayName' is assigned a value but never used.","'setDisplayName' is assigned a value but never used.","'loading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SinglePostComments' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postID'. Either include it or remove the dependency array.","ArrayExpression",["166"],"'currentUser' is assigned a value but never used.","'setImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'subPlatform'. Either include it or remove the dependency array.",["168"],"'imgURL' is assigned a value but never used.","'setImgURL' is assigned a value but never used.","Assignments to the 'userDetails' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'userName'. Either include it or remove the dependency array.",["169"],"'db' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [postID]",{"range":"178","text":"179"},"Update the dependencies array to be: [fetchData]",{"range":"180","text":"181"},"Update the dependencies array to be: [subPlatform]",{"range":"182","text":"183"},"Update the dependencies array to be: [userName]",{"range":"184","text":"185"},[443,445],"[postID]",[1592,1594],"[fetchData]",[776,778],"[subPlatform]",[899,901],"[userName]"]