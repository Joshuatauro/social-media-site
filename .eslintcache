[{"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js":"3","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js":"4","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx":"5","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js":"6","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx":"7","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx":"8","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx":"9","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx":"10","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx":"11","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx":"12","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx":"13","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx":"14","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx":"15","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx":"16","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx":"17","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx":"18"},{"size":441,"mtime":1607611560683,"results":"19","hashOfConfig":"20"},{"size":1157,"mtime":1607705666781,"results":"21","hashOfConfig":"20"},{"size":1086,"mtime":1607607867938,"results":"22","hashOfConfig":"20"},{"size":627,"mtime":1607513550593,"results":"23","hashOfConfig":"20"},{"size":2273,"mtime":1607606957910,"results":"24","hashOfConfig":"20"},{"size":524,"mtime":1607459877923,"results":"25","hashOfConfig":"20"},{"size":2109,"mtime":1607598210331,"results":"26","hashOfConfig":"20"},{"size":1359,"mtime":1607595246842,"results":"27","hashOfConfig":"20"},{"size":2401,"mtime":1607595762544,"results":"28","hashOfConfig":"20"},{"size":1049,"mtime":1607605322317,"results":"29","hashOfConfig":"20"},{"size":1429,"mtime":1607519179403,"results":"30","hashOfConfig":"20"},{"size":3351,"mtime":1607704077087,"results":"31","hashOfConfig":"20"},{"size":547,"mtime":1607694335769,"results":"32","hashOfConfig":"20"},{"size":925,"mtime":1607715152414,"results":"33","hashOfConfig":"20"},{"size":3254,"mtime":1607700529633,"results":"34","hashOfConfig":"20"},{"size":605,"mtime":1607694853056,"results":"35","hashOfConfig":"20"},{"size":1155,"mtime":1607705028042,"results":"36","hashOfConfig":"20"},{"size":1357,"mtime":1607706255714,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"4wge5a",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js",[],["78","79"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx",["80","81","82"],"import React, { useState , useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from \"../Context/AuthContext\"\r\nimport { ThemeContext } from \"../Context/GeneralContext\"\r\nimport { db } from '../Firebase/firebase'\r\n\r\nimport \"./CreatePost.css\"\r\n\r\nconst CreatePost = () => {\r\n  let history = useHistory()\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [text,setText] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [platform, setPlatform] = useState('All')\r\n\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const handlePostSubmit = e => {\r\n    e.preventDefault()\r\n    db.collection('users').get()\r\n      .then((\r\n        res => {\r\n\r\n          res.docs.map((doc) => {\r\n            if(doc.id === currentUser.uid){\r\n              console.log(\"FOUND\",doc.data().displayName)\r\n              // setDisplayName(doc.data().displayName)\r\n              addPost(doc.data().displayName)\r\n              \r\n            }\r\n          })\r\n        }\r\n      ))\r\n  }\r\n\r\n  const addPost = (userName) => {\r\n    console.log(userName, \"you got the fucking username bitch then fucking show it \")\r\n    db.collection('posts').add(\r\n      {\r\n        displayName: userName,\r\n        title,\r\n        para: text,\r\n        subPlatform: platform\r\n      }\r\n    ).then(docRef => {\r\n      console.log(docRef.id)\r\n      history.push(`/post/${docRef.id}`)\r\n    })\r\n    console.log(\"POSTED\")\r\n  }\r\n\r\n  \r\n  return (\r\n    <section className={`create-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"create-post__container\">\r\n        <form className=\"create-post__container__form\" onSubmit={handlePostSubmit}>\r\n          <div className=\"create-post__container__form__input\">\r\n            <input type=\"text\" required onChange={e => setTitle(e.target.value)} value={title}/>\r\n            <label className=\"create-post__container__form__input__label title\">Title</label>\r\n          </div>\r\n          <div className=\"create-post__container__form__input\">\r\n            <textarea type=\"text\" required onChange={e => setText(e.target.value)} value={text} />\r\n            <label className=\"create-post__container__form__input__label text\">Text</label>\r\n          </div>\r\n\r\n          <div className=\"create-post__container__form__btn__platform\">\r\n            <button className=\"create-post__container__form__btn\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n\r\n            <select className=\"create-post__container__form__options\" onChange={e => setPlatform(e.target.value)}>\r\n\r\n              <option value=\"All\" className=\"create-post__container__form__platform\">All</option>\r\n              <option value=\"FrontEnd\" className=\"create-post__container__form__platform\">Front-end</option>\r\n              <option value=\"BackEnd\" className=\"create-post__container__form__platform\">Back-end</option>\r\n              <option value=\"FullStack\" className=\"create-post__container__form__platform\">Full-Stack</option>\r\n              <option value=\"Design\" className=\"create-post__container__form__platform\">Design</option>\r\n              <option value=\"Devops\" className=\"create-post__container__form__platform\">Devops</option>\r\n\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CreatePost","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx",["83"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport SinglePostComments from './SinglePostComments/SinglePostComments'\r\nimport SinglePostMain from './SinglePostMain/SinglePostMain'\r\n\r\nimport './SinglePost.css'\r\n\r\nconst SinglePost = () => {\r\n  const { postID } = useParams()\r\n\r\n  return (\r\n    <section className=\"single-post-page\">\r\n      <div className=\"single-post-page__container\">\r\n        <SinglePostMain \r\n          postID = {postID}\r\n        />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePost\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx",["84"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx",["85","86","87","88"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {useParams, Link} from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { ThemeContext } from '../../Context/GeneralContext'\r\n\r\nimport { db } from '../../Firebase/firebase'\r\nimport SinglePostComments from '../SinglePostComments/SinglePostComments'\r\nimport SinglePostInput from '../SinglePostInputComment/SinglePostInput'\r\n\r\nimport './SinglePostMain.css'\r\n\r\nconst SinglePostMain = () => {\r\n  const {currentUser} = useContext(AuthContext)\r\n  const {darkTheme} = useContext(ThemeContext)\r\n  const { postID } = useParams()\r\n\r\n  let posts = []\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [para, setPara] = useState('')\r\n  const [imageURL, setImageURL] = useState('')\r\n  const [subPlatform, setSubPlatform] = useState('')\r\n\r\n  \r\n\r\n  const fetchData = () => {\r\n    db.collection('posts').get()\r\n      .then(res => {\r\n        res.docs.map((doc) => {\r\n\r\n          if(doc.id === postID){\r\n            posts.push(doc.data())\r\n\r\n\r\n\r\n            setPara(posts[0].para)\r\n            setTitle(posts[0].title)\r\n            setDisplayName(posts[0].displayName)\r\n            setSubPlatform(posts[0].subPlatform)\r\n            \r\n          }\r\n        })\r\n      })\r\n\r\n  }\r\n\r\n  // FOR GETTING THE DETAILS OF THE POST\r\n  useEffect(() => {\r\n    fetchData()\r\n    \r\n    return fetchData\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <section className={`single-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"post__container single-post__container\">\r\n\r\n        <div className=\"single-post__container__post-user-details\">\r\n          <div className=\"single-post__container__post-user-details__avatar\">\r\n            {imageURL ? (\r\n              <img src={imageURL} alt=\"user\"/>\r\n            ) : (\r\n              <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSrDJ5-IKojn4Rn2dlrRjCzDUjJ8G-TYuh0Aw&usqp=CAU\" alt=\"user\" />\r\n            )}\r\n          </div>\r\n        \r\n          <div className=\"single-post__container__post-user-details__col\">\r\n\r\n            <div className=\"single-post__container__post-user-details__col__platform\">\r\n              <Link to={`/platform/${subPlatform}`}>\r\n                <h5>TDP/{subPlatform}</h5>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"single-post__container__post-user-details__col__username\">\r\n              <h6>By u/{displayName}</h6>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"single-post__container__post-details\">\r\n\r\n          <div className=\"single-post__container__post-details__heading\">\r\n              <h1 className=\"single-post__container__post-details__heading-heading\">\r\n                {title}\r\n              </h1>\r\n          </div>\r\n\r\n          <div className=\"single-post__container__post-details__para\">\r\n            <p className=\"single-post__container__post-details__para-para\">\r\n              {para}\r\n            </p>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <SinglePostInput\r\n          postID={postID}\r\n          userName={displayName}\r\n        />\r\n\r\n        <SinglePostComments postID={postID}/>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostMain\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx",["89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":21},{"ruleId":"94","severity":1,"message":"98","line":14,"column":23,"nodeType":"96","messageId":"97","endLine":14,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":27,"column":30,"nodeType":"101","messageId":"102","endLine":27,"endColumn":32},{"ruleId":"94","severity":1,"message":"103","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":15,"column":5,"nodeType":"106","endLine":15,"endColumn":7,"suggestions":"107"},{"ruleId":"94","severity":1,"message":"108","line":13,"column":10,"nodeType":"96","messageId":"97","endLine":13,"endColumn":21},{"ruleId":"94","severity":1,"message":"109","line":22,"column":20,"nodeType":"96","messageId":"97","endLine":22,"endColumn":31},{"ruleId":"99","severity":1,"message":"100","line":30,"column":28,"nodeType":"101","messageId":"102","endLine":30,"endColumn":30},{"ruleId":"104","severity":1,"message":"110","line":53,"column":6,"nodeType":"106","endLine":53,"endColumn":8,"suggestions":"111"},{"ruleId":"104","severity":1,"message":"112","line":28,"column":5,"nodeType":"106","endLine":28,"endColumn":7,"suggestions":"113"},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'displayName' is assigned a value but never used.","Identifier","unusedVar","'setDisplayName' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SinglePostComments' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postID'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'currentUser' is assigned a value but never used.","'setImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'subPlatform'. Either include it or remove the dependency array.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [postID]",{"range":"125","text":"126"},"Update the dependencies array to be: [fetchData]",{"range":"127","text":"128"},"Update the dependencies array to be: [subPlatform]",{"range":"129","text":"130"},[443,445],"[postID]",[1435,1437],"[fetchData]",[776,778],"[subPlatform]"]