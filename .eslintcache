[{"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js":"3","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js":"4","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx":"5","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js":"6","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx":"7","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx":"8","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx":"9","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx":"10","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx":"11","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx":"12","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx":"13","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx":"14","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx":"15","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx":"16","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx":"17","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx":"18","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\LoadingIcon\\LoadingIcon.jsx":"19","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserSettings.jsx":"20","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfileAside\\UserProfileAside.jsx":"21"},{"size":441,"mtime":1607611560683,"results":"22","hashOfConfig":"23"},{"size":1322,"mtime":1607767157450,"results":"24","hashOfConfig":"23"},{"size":1086,"mtime":1607779315268,"results":"25","hashOfConfig":"23"},{"size":627,"mtime":1607513550593,"results":"26","hashOfConfig":"23"},{"size":2273,"mtime":1607606957910,"results":"27","hashOfConfig":"23"},{"size":524,"mtime":1607459877923,"results":"28","hashOfConfig":"23"},{"size":2202,"mtime":1607776662289,"results":"29","hashOfConfig":"23"},{"size":1358,"mtime":1607748186357,"results":"30","hashOfConfig":"23"},{"size":2401,"mtime":1607595762544,"results":"31","hashOfConfig":"23"},{"size":1365,"mtime":1607777013306,"results":"32","hashOfConfig":"23"},{"size":1429,"mtime":1607519179403,"results":"33","hashOfConfig":"23"},{"size":3443,"mtime":1607766818885,"results":"34","hashOfConfig":"23"},{"size":547,"mtime":1607694335769,"results":"35","hashOfConfig":"23"},{"size":925,"mtime":1607715152414,"results":"36","hashOfConfig":"23"},{"size":3489,"mtime":1607763327047,"results":"37","hashOfConfig":"23"},{"size":605,"mtime":1607694853056,"results":"38","hashOfConfig":"23"},{"size":1369,"mtime":1607766940064,"results":"39","hashOfConfig":"23"},{"size":1357,"mtime":1607706255714,"results":"40","hashOfConfig":"23"},{"size":534,"mtime":1607762780535,"results":"41","hashOfConfig":"23"},{"size":1915,"mtime":1607778036925,"results":"42","hashOfConfig":"23"},{"size":996,"mtime":1607778354187,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"4wge5a",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\index.js",[],["93","94"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\App.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\AuthContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Firebase\\firebase.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Navbar\\Navbar.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Context\\GeneralContext.js",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostComponent\\Post.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\PostActionsComponent\\PostActions.jsx",["95"],"import React, { useState, useContext } from 'react'\r\nimport { ThemeContext } from '../../Context/GeneralContext'\r\n\r\nimport './PostActions.css'\r\n\r\nconst PostActions = ({comments}) => {\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const [upvotes, setUpvotes] = useState(1000)\r\n  const [downvotes, setDownvotes] = useState(-1)\r\n  // const [comments, setComments] = useState(10)\r\n\r\n  const upvote = () => {\r\n    setUpvotes(upvotes+1)\r\n  }\r\n\r\n  const downvote = () => {\r\n    setDownvotes(downvotes-1)\r\n  }\r\n\r\n\r\n  return (\r\n    <section className={`post-actions ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"post-actions__container\">\r\n        <div className=\"post-actions__container-col\">\r\n\r\n          <button className=\"post-actions__container-col__vote\" onClick={upvote}>\r\n            <i className=\"fas fa-heart\" />\r\n            {upvotes}\r\n          </button>\r\n\r\n          {/* <button className=\"post-actions__container-col__vote\" onClick={downvote}>\r\n            <i className=\"fas fa-caret-down fa-2x\" />\r\n            {downvotes}\r\n          </button> */}\r\n\r\n        </div>\r\n\r\n        <div className=\"post-actions__container-col\">\r\n          <div className=\"post-actions__container-col__comments\">\r\n            <h4>Comments({comments})</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PostActions\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SignUpComponent\\SignUp.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Home\\Home.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\LogInComponent\\Login.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\CreatePostComponent\\CreatePost.jsx",["96","97","98","99"],"import React, { useState , useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from \"../Context/AuthContext\"\r\nimport { ThemeContext } from \"../Context/GeneralContext\"\r\nimport { db } from '../Firebase/firebase'\r\n\r\nimport firebase from 'firebase'\r\n\r\nimport \"./CreatePost.css\"\r\n\r\nconst CreatePost = () => {\r\n  let history = useHistory()\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [text,setText] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [platform, setPlatform] = useState('All')\r\n\r\n  const [loading, isLoading] = useState(false)\r\n\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const handlePostSubmit = e => {\r\n    e.preventDefault()\r\n    if(currentUser){\r\n\r\n      db.collection('users').get()\r\n        .then((\r\n          res => {\r\n  \r\n            res.docs.map((doc) => {\r\n              if(doc.id === currentUser.uid){\r\n                \r\n                addPost(doc.data().displayName)\r\n                \r\n              }\r\n            })\r\n          }\r\n        ))\r\n    } else {\r\n      alert(\"You need to create on account to post\")\r\n    }\r\n  }\r\n\r\n  const addPost = (userName) => {\r\n    isLoading(true)\r\n    db.collection('posts').add(\r\n      {\r\n        displayName: userName,\r\n        title,\r\n        para: text,\r\n        subPlatform: platform,\r\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp()\r\n      }\r\n    ).then(docRef => {\r\n      console.log(docRef.id)\r\n      history.push(`/post/${docRef.id}`)\r\n    })\r\n    \r\n  }\r\n\r\n  \r\n  return (\r\n    <section className={`create-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"create-post__container\">\r\n        <form className=\"create-post__container__form\" onSubmit={handlePostSubmit}>\r\n          <div className=\"create-post__container__form__input\">\r\n            <input type=\"text\" required onChange={e => setTitle(e.target.value)} value={title}/>\r\n            <label className=\"create-post__container__form__input__label title\">Title</label>\r\n          </div>\r\n          <div className=\"create-post__container__form__input\">\r\n            <textarea type=\"text\" required onChange={e => setText(e.target.value)} value={text} />\r\n            <label className=\"create-post__container__form__input__label text\">Text</label>\r\n          </div>\r\n\r\n          <div className=\"create-post__container__form__btn__platform\">\r\n            <button className=\"create-post__container__form__btn\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n\r\n            <select className=\"create-post__container__form__options\" onChange={e => setPlatform(e.target.value)}>\r\n\r\n              <option value=\"All\" className=\"create-post__container__form__platform\">All</option>\r\n              <option value=\"FrontEnd\" className=\"create-post__container__form__platform\">Front-end</option>\r\n              <option value=\"BackEnd\" className=\"create-post__container__form__platform\">Back-end</option>\r\n              <option value=\"FullStack\" className=\"create-post__container__form__platform\">Full-Stack</option>\r\n              <option value=\"Design\" className=\"create-post__container__form__platform\">Design</option>\r\n              <option value=\"Devops\" className=\"create-post__container__form__platform\">Devops</option>\r\n\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CreatePost","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePost.jsx",["100"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport SinglePostComments from './SinglePostComments/SinglePostComments'\r\nimport SinglePostMain from './SinglePostMain/SinglePostMain'\r\n\r\nimport './SinglePost.css'\r\n\r\nconst SinglePost = () => {\r\n  const { postID } = useParams()\r\n\r\n  return (\r\n    <section className=\"single-post-page\">\r\n      <div className=\"single-post-page__container\">\r\n        <SinglePostMain \r\n          postID = {postID}\r\n        />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePost\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostComments\\SinglePostComments.jsx",["101"],"import React, { useEffect, useState } from 'react'\r\nimport Comment from \"../../Reusables/Comment/Comment\"\r\nimport { db } from \"../../Firebase/firebase\"\r\n\r\nimport './SinglePostComments.css'\r\n\r\nconst SinglePostComments = ({postID}) => {\r\n  const [comments, setComments] = useState([])\r\n\r\n  useEffect(() => {\r\n    db.collection('comments').where(\"parentID\", \"==\", postID).onSnapshot(snapshot => {\r\n      setComments(snapshot.docs)\r\n    })\r\n\r\n  },[])\r\n\r\n  return (\r\n    <section className=\"single-post-comments\">\r\n      <div className=\"single-post-comments__container\">\r\n        <div className=\"single-post-comments__container-header\">\r\n          <h2>Comments</h2>\r\n        </div>\r\n        {comments.map((comment) => {\r\n          return(\r\n          \r\n            <Comment \r\n              props={comment.data()}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostComments\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostMain\\SinglePostMain.jsx",["102","103","104","105"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {useParams, Link} from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { ThemeContext } from '../../Context/GeneralContext'\r\n\r\nimport { db } from '../../Firebase/firebase'\r\nimport LoadingIcon from '../../Reusables/LoadingIcon/LoadingIcon'\r\nimport SinglePostComments from '../SinglePostComments/SinglePostComments'\r\nimport SinglePostInput from '../SinglePostInputComment/SinglePostInput'\r\n\r\nimport './SinglePostMain.css'\r\n\r\nconst SinglePostMain = () => {\r\n  const {currentUser} = useContext(AuthContext)\r\n  const {darkTheme} = useContext(ThemeContext)\r\n  const { postID } = useParams()\r\n\r\n  let posts = []\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [para, setPara] = useState('')\r\n  const [imageURL, setImageURL] = useState('')\r\n  const [subPlatform, setSubPlatform] = useState('')\r\n\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  const fetchData = () => {\r\n    \r\n    db.collection('posts').get()\r\n      .then(res => {\r\n        res.docs.map((doc) => {\r\n\r\n          if(doc.id === postID){\r\n            posts.push(doc.data())\r\n\r\n\r\n\r\n            setPara(posts[0].para)\r\n            setTitle(posts[0].title)\r\n            setDisplayName(posts[0].displayName)\r\n            setSubPlatform(posts[0].subPlatform)\r\n            isLoading(false)\r\n          }\r\n        })\r\n      })\r\n    \r\n  }\r\n\r\n  // FOR GETTING THE DETAILS OF THE POST\r\n  useEffect(() => {\r\n    isLoading(true)\r\n    fetchData()\r\n    \r\n    return fetchData\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <section className={`single-post ${darkTheme ? \"\" : \"light\"}`}>\r\n      {loading ? (\r\n        <LoadingIcon />\r\n      ) : (\r\n        <div className=\"post__container single-post__container\">\r\n\r\n        <div className=\"single-post__container__post-user-details\">\r\n          <div className=\"single-post__container__post-user-details__avatar\">\r\n            {imageURL ? (\r\n              <img src={imageURL} alt=\"user\"/>\r\n            ) : (\r\n              <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSrDJ5-IKojn4Rn2dlrRjCzDUjJ8G-TYuh0Aw&usqp=CAU\" alt=\"user\" />\r\n            )}\r\n          </div>\r\n        \r\n          <div className=\"single-post__container__post-user-details__col\">\r\n\r\n            <div className=\"single-post__container__post-user-details__col__platform\">\r\n              <Link to={`/platform/${subPlatform}`}>\r\n                <h5>TDP/{subPlatform}</h5>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"single-post__container__post-user-details__col__username\">\r\n              <h6>By u/{displayName}</h6>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"single-post__container__post-details\">\r\n\r\n          <div className=\"single-post__container__post-details__heading\">\r\n              <h1 className=\"single-post__container__post-details__heading-heading\">\r\n                {title}\r\n              </h1>\r\n          </div>\r\n\r\n          <div className=\"single-post__container__post-details__para\">\r\n            <p className=\"single-post__container__post-details__para-para\">\r\n              {para}\r\n            </p>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <SinglePostInput\r\n          postID={postID}\r\n          userName={displayName}\r\n        />\r\n\r\n        <SinglePostComments postID={postID}/>\r\n      </div>\r\n      )}\r\n      \r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostMain\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\Comment\\Comment.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\SinglePost\\SinglePostInputComment\\SinglePostInput.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\PlatformHome\\PlatformHome.jsx",["106"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { ThemeContext } from '../Context/GeneralContext'\r\nimport Post from '../Reusables/PostComponent/Post'\r\nimport { db } from '../Firebase/firebase'\r\nimport './PlatformHome.css'\r\n\r\nconst PlatformHome = () => {\r\n  const {subPlatform} = useParams()\r\n  const { darkTheme } = useContext(ThemeContext)\r\n\r\n  const [postsArr, setPostsArr] = useState([])\r\n\r\n  useEffect(() => {\r\n    db.collection('posts').where(\"subPlatform\", \"==\" ,subPlatform).onSnapshot(snapshot => {\r\n      \r\n      setPostsArr(snapshot.docs.map( \r\n        doc => \r\n        (\r\n          {\r\n            id: doc.id,\r\n            post: doc.data()\r\n          }\r\n        )\r\n        \r\n      ))\r\n    })\r\n  },[])\r\n\r\n  return (\r\n    <section className={`home ${darkTheme ? \"\" : \"light\"}`}>\r\n      <div className=\"home__container\">\r\n      <div className=\"platform-home\">\r\n        <h2>Welcome to \r\n          <span>\r\n            TDP/{subPlatform}\r\n          </span>\r\n        </h2>\r\n      </div>\r\n        {postsArr.map((props) => {\r\n          const ID = props.id\r\n          return(\r\n            <div className=\"home-post\">\r\n              <Post key={ID} props={props}/>\r\n            </div>\r\n          )\r\n        })}\r\n        \r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PlatformHome\r\n","C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\Reusables\\LoadingIcon\\LoadingIcon.jsx",[],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserSettings.jsx",["107"],"C:\\Users\\Lenovo\\Desktop\\my-reddit-clone\\src\\Components\\UserSettingsComponent\\UserProfileAside\\UserProfileAside.jsx",["108","109","110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":17,"column":9,"nodeType":"118","messageId":"119","endLine":17,"endColumn":17},{"ruleId":"116","severity":1,"message":"120","line":16,"column":10,"nodeType":"118","messageId":"119","endLine":16,"endColumn":21},{"ruleId":"116","severity":1,"message":"121","line":16,"column":23,"nodeType":"118","messageId":"119","endLine":16,"endColumn":37},{"ruleId":"116","severity":1,"message":"122","line":19,"column":10,"nodeType":"118","messageId":"119","endLine":19,"endColumn":17},{"ruleId":"123","severity":1,"message":"124","line":33,"column":32,"nodeType":"125","messageId":"126","endLine":33,"endColumn":34},{"ruleId":"116","severity":1,"message":"127","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":15,"column":5,"nodeType":"130","endLine":15,"endColumn":7,"suggestions":"131"},{"ruleId":"116","severity":1,"message":"132","line":14,"column":10,"nodeType":"118","messageId":"119","endLine":14,"endColumn":21},{"ruleId":"116","severity":1,"message":"133","line":23,"column":20,"nodeType":"118","messageId":"119","endLine":23,"endColumn":31},{"ruleId":"123","severity":1,"message":"124","line":32,"column":28,"nodeType":"125","messageId":"126","endLine":32,"endColumn":30},{"ruleId":"128","severity":1,"message":"134","line":56,"column":6,"nodeType":"130","endLine":56,"endColumn":8,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"136","line":28,"column":5,"nodeType":"130","endLine":28,"endColumn":7,"suggestions":"137"},{"ruleId":"128","severity":1,"message":"138","line":27,"column":6,"nodeType":"130","endLine":27,"endColumn":8,"suggestions":"139"},{"ruleId":"116","severity":1,"message":"140","line":8,"column":10,"nodeType":"118","messageId":"119","endLine":8,"endColumn":16},{"ruleId":"116","severity":1,"message":"141","line":8,"column":17,"nodeType":"118","messageId":"119","endLine":8,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":13,"column":31,"nodeType":"125","messageId":"126","endLine":13,"endColumn":33},{"ruleId":"128","severity":1,"message":"142","line":14,"column":23,"nodeType":"143","endLine":14,"endColumn":33},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'downvote' is assigned a value but never used.","Identifier","unusedVar","'displayName' is assigned a value but never used.","'setDisplayName' is assigned a value but never used.","'loading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SinglePostComments' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postID'. Either include it or remove the dependency array.","ArrayExpression",["146"],"'currentUser' is assigned a value but never used.","'setImageURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'subPlatform'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'userName'. Either include it or remove the dependency array.",["149"],"'imgURL' is assigned a value but never used.","'setImgURL' is assigned a value but never used.","Assignments to the 'userDetails' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [postID]",{"range":"158","text":"159"},"Update the dependencies array to be: [fetchData]",{"range":"160","text":"161"},"Update the dependencies array to be: [subPlatform]",{"range":"162","text":"163"},"Update the dependencies array to be: [userName]",{"range":"164","text":"165"},[443,445],"[postID]",[1592,1594],"[fetchData]",[776,778],"[subPlatform]",[901,903],"[userName]"]